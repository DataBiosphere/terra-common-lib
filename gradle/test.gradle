dependencies {
    // Jsonpath version is managed by the Spring Boot plugin
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path'
    testImplementation group: 'io.opencensus', name: 'opencensus-impl', version: OPENCENSUS_VERSION
    testImplementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    // Jupiter version is managed by the Spring Boot plugin
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
}

tasks.withType(Test) {
    testLogging {
        events = [
            "passed",
            "failed",
            "skipped"
        ]
        // Causes the correct line to be reported on an exception.
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        reports {
            // Write XML file (used by CircleCI, Jenkins, etc) to build/test-results/*
            junitXml.enabled = true
            // Write human-readable test report to build/reports/tests/*
            html.enabled = true
        }
    }
}

// Inspired by https://github.com/spotbugs/spotbugs-gradle-plugin/blob/master/gradle/test.gradle
jacoco {
    toolVersion = "0.8.6"
}
def jacocoTestReport = tasks.named('jacocoTestReport') {
    reports {
        xml {
            enabled true
        }
    }
}
tasks.named('check').configure {
    dependsOn jacocoTestReport
}
